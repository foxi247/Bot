# utils/nanobanano_api.py
import asyncio
import aiohttp
import os

REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

async def generate_nanobanano_image(prompt: str) -> str:
    if not REPLICATE_API_TOKEN:
        print("‚ùå REPLICATE_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return None # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º ValueError, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª

    # –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ Replicate (–æ–∫—Ç—è–±—Ä—å 2025)
    MODEL_VERSION = "7762fd07cf82c948538e41f63f77d685e02b063e37e496e96eefd46c929f9bdc"

    async with aiohttp.ClientSession() as session:
        try:
            # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            async with session.post(
                "https://api.replicate.com/v1/predictions", # <--- –£–ë–†–ê–ù–´ –ü–†–û–ë–ï–õ–´
                headers={
                    "Authorization": f"Token {REPLICATE_API_TOKEN}",
                    "Content-Type": "application/json"
                },
                json={
                    "version": MODEL_VERSION,
                    "input": {
                        "prompt": prompt,
                        "width": 768,
                        "height": 768,
                        "refine": "expert_ensemble_refiner",
                        "apply_watermark": False,
                        "num_inference_steps": 25
                    }
                }
            ) as resp:
                if resp.status != 201:
                    error_text = await resp.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {resp.status} ‚Äî {error_text}")
                    return None
                data = await resp.json()
                prediction_id = data["id"]
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {prediction_id}")

            # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–∞–∫—Å. 100 —Å–µ–∫—É–Ω–¥)
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            for _ in range(100):
                await asyncio.sleep(1)
                async with session.get(
                    f"https://api.replicate.com/v1/predictions/{prediction_id}", # <--- –£–ë–†–ê–ù –ü–†–û–ë–ï–õ
                    headers={"Authorization": f"Token {REPLICATE_API_TOKEN}"}
                ) as resp:
                    result = await resp.json()
                    status = result["status"]
                    print(f"   –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status}")
                    if status == "succeeded":
                        output_urls = result.get("output", [])
                        if output_urls:
                            print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
                            return output_urls[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        else:
                            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, –Ω–æ URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.")
                            return None
                    elif status in ("failed", "canceled"):
                        error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {error}")
                        return None
            print("‚ùå –¢–∞–π–º–∞—É—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ª—å—à–µ 100 —Å–µ–∫—É–Ω–¥")
            return None

        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ generate_nanobanano_image: {e}")
            return None
